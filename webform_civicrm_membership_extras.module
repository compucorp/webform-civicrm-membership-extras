<?php

/**
 * Implements hook_webform_submission_insert.
 *
 * Creates the payment plan Remaining upfront contributions
 * if the webform is configured to create a payment plan.
 *
 * @param $node
 * @param $submission
 */
function webform_civicrm_membership_extras_webform_submission_insert($node, $submission) {
  if (!_membershipextras_isCivicrmWebform($node)) {
    return;
  }

  $contributionRecurId = _membershipextras_getPaymentPlanRecurContribution($node);

  if (!empty($contributionRecurId)) {
    civicrm_initialize();
    $installmentsHandler = new CRM_MembershipExtras_Service_MembershipInstallmentsHandler($contributionRecurId);
    $installmentsHandler->createRemainingInstalmentContributionsUpfront();
  }
}


/**
 * Implements hook_form_alter().
 */
function webform_civicrm_membership_extras_form_alter(&$form, &$form_state, $form_id) {
  $civiDiscountExtensionHelper = new CiviDiscount();
  $webformDiscountSettings = new WebformDiscountSettings();
  if ($form_id == 'wf_crm_configure_form') {
    if ($civiDiscountExtensionHelper->isEnabled()) {
      $nid = $form_state['storage']['nid'];
      $discountStatus = $webformDiscountSettings->getDiscountStatus($nid);

      $form['contribution']['wcm_enable_discount'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Discounts'),
        '#default_value' => $discountStatus,
        '#description' => 'When adding this field to you webform, please make sure it is on the Civi contribution page'
      );
      $form['#submit'][] = '_webform_civicrm_discount_settings_submit';
    }
  }

  if (isset($form['submitted']['webform_discount_code_field'])) {
    $isDiscountEnabled = $webformDiscountSettings->getDiscountStatus($form['#node']->nid);
    //Hide the apply discount field on webform if enable discount is disabled or cividiscount
    //extension is disabled.
    if (!$civiDiscountExtensionHelper->isEnabled() || !$isDiscountEnabled) {
      $form['submitted']['webform_discount_code_field']['#access'] = FALSE;
    }
    else {
      $fields = $form['submitted'];
      $form['submitted']['webform_discount_code_message_wrapper'] = array(
        '#type' => 'container',
        '#weight' => $fields['webform_discount_code_field']['#weight'],
        '#prefix' => '<div id="discount-code-message-wrapper">',
        '#suffix' => '</div>',
      );
      $form['submitted']['webform_discount_code_message_wrapper']['webform_discount_code_field_markup'] = array(
        '#markup' => '',
      );
      $form['submitted']['webform_discount_code_buttons_wrapper'] = array(
        '#type' => 'container',
        '#weight' => $fields['webform_discount_code_field']['#weight'] + 1,
        '#prefix' => '<span id="discount-code-actions">',
        '#suffix' => '</span>',
      );
      $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_clear'] = array(
        '#type' => 'submit',
        '#value' => 'Clear',
        '#submit' => array('_webform_discount_code_clear_submit_callback'),
        '#access' => FALSE,
        '#limit_validation_errors' => array(),
        '#validate' => '',
        '#ajax' => array(
          'callback' => '_webform_discount_code_clear_ajax_callback',
        ),
      );
      if (isset($form_state['disable_submit']['webform_discount_code_field'])) {
        $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_clear']['#access'] = TRUE;
      }
      $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_apply'] = array(
        '#type' => 'submit',
        '#value' => 'Apply',
        '#submit' => array('_webform_discount_code_field_submit_callback'),
        '#limit_validation_errors' => array(),
        '#validate' => 'test_validate',
        '#ajax' => array(
          'callback' => '_webform_discount_code_field_ajax_callback',
        ),
      );
    }
  }
}

function _webform_discount_code_clear_submit_callback() {

}

function webform_discount_code_clear_ajax_callback() {

}
/**
 * Custom submit callback for discount code apply
 *
 * @param array $form
 * @param array $form_state
 */
function _webform_discount_code_field_submit_callback($form, &$form_state) {
  $form_values = &$form_state['input']['submitted'];
  if (!empty($form_values['webform_discount_code_field'])) {

    try{
      _validate_webform_discount_code($form_values['webform_discount_code_field']);
    } catch(Exception $e) {
      $form_state['discount_error_message'] = $e->getMessage();

      return;
    }

  }
  else {
    $form_state['discount_error_message'] = t('The discount code you entered is invalid.');
  }
}

/**
 * Custom Ajax callback for discount code apply
 *
 * @param array $form
 * @param array $form_state
 */
function _webform_discount_code_field_ajax_callback($form, &$form_state) {
  if ($form_state['discount_error_message']) {
    $markup = '<div class=\'discount-message\' style=\'background-color: #ffd6cb; color: #701a00;\'>' . $form_state['discount_error_message'] . '</div>';
    $form['submitted']['webform_discount_code_message_wrapper']['webform_discount_code_field_markup']['#markup'] = $markup;
    $ajax_commands[] = ajax_command_replace('#discount-code-message-wrapper', render($form['submitted']['webform_discount_code_message_wrapper']));

    return array('#type' => 'ajax', '#commands' => $ajax_commands);
  }
}

/**
 * Validates the webform discount code.
 *
 * @param string $discount_code
 *
 * @throws \Exception
 */
function _validate_webform_discount_code($discount_code) {
  $discount_code_validator = new DiscountCode();
  $discount_code_validator->validate($discount_code);
}

/**
 * Submit callback for the webform discount settings
 *
 * @param array $form
 * @param array $form_state
 */
function _webform_civicrm_discount_settings_submit(&$form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $enableDiscountStatus = $form_state['values']['wcm_enable_discount'];
  $webformDiscountSettings = new WebformDiscountSettings();
  $webformDiscountSettings->save($nid, $enableDiscountStatus);

  $node = node_load($nid);
  if (!_webform_has_discount_component_attached($node)) {
    _webform_discount_civicrm_create_discount_component($node);
  }
}


/**
 * Checks whether the webform has the discount field
 * component already attached to it.
 * @param object $node
 *   Webform Node object.
 *
 * @return bool
 */
function _webform_has_discount_component_attached($node) {
  foreach ($node->webform['components'] as $key => $value) {
    if ($value['form_key'] == 'webform_discount_code_field') {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Create discount webform component for particular node.
 *
 * @param object $node
 *   Webform Node object.
 *
 * @return bool
 *   Status.
 */
function _webform_discount_civicrm_create_discount_component(&$node) {

  if (empty($node)) {
    return FALSE;
  }

  $weight = end($node->webform['components'])['weight'] + 1;

  // Create Discount code component.
  $component = array(
    'nid' => $node->nid,
    'pid' => 0,
    'form_key' => 'webform_discount_code_field',
    'name' => t('Apply Discount Code'),
    'type' => 'textfield',
    'value' => '',
    'weight' => !empty($weight) ? $weight : 1000,
    'extra' => array(
      'width' => 10,
    ),
  );
  $node->webform['components'][] = $component;
  $added_cid = webform_component_insert($component);
  if ($added_cid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines if "CiviCRM  Processing" is enabled on
 * the Webform.
 *
 * @param $node
 *
 * @return bool
 */
function _membershipextras_isCivicrmWebform($node) {
  if (property_exists($node, 'webform_civicrm')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Gets the created recur contribution ID if there
 * is any, otherwise return NULL;
 *
 * @param $node
 *
 * @return int|null
 */
function _membershipextras_getPaymentPlanRecurContribution($node) {
  $civiWebformEntityProperty = _membershipextras_getCiviWebformPostprocessorPropertyValue($node, 'ent');

  if (empty($civiWebformEntityProperty['contribution'][1]['id'])) {
    return NULL;
  }

  $contributionId = $civiWebformEntityProperty['contribution'][1]['id'];

  try {
    $contributionRecurId = civicrm_api3('Contribution', 'getvalue', [
      'return' => 'contribution_recur_id',
      'id' => $contributionId,
    ]);

    return $contributionRecurId;
  }
  catch (Exception $e) {
    return NULL;
  }
}

/**
 * Gets wf_crm_webform_postprocess class property
 * value, whither its protected or private.
 *
 * Since we don't have control over wf_crm_webform_postprocess
 * but we need some of its private/protected properties values,
 * We are using the reflection here to achieve that.
 *
 * @param $node
 * @param $propertyName
 *
 * @return mixed
 */
function _membershipextras_getCiviWebformPostprocessorPropertyValue($node, $propertyName) {
  $civiWebformPostprocessor = wf_crm_webform_postprocess::singleton($node);
  $civiWebformPostprocessorReflection = new ReflectionObject($civiWebformPostprocessor);
  $entityReflectionObject = $civiWebformPostprocessorReflection->getProperty($propertyName);
  $entityReflectionObject->setAccessible(true);
  return $entityReflectionObject->getValue($civiWebformPostprocessor);
}
